name: Build and Release

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
    paths-ignore:
      - '**/*.md'
      - '**/*.MD'
      - 'docs/**'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          # Extract version from tag (remove 'v' prefix if present)
          VERSION=${GITHUB_REF#refs/tags/v}
          VERSION=${VERSION#refs/tags/}  # Also handle tags without 'v' prefix
        else
          # For non-tagged builds, get latest release version
          LATEST_RELEASE=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.tag_name // empty')
          if [ -n "$LATEST_RELEASE" ]; then
            # Remove 'v' prefix if present and use latest release version
            VERSION=${LATEST_RELEASE#v}
            echo "Using latest release version: $VERSION"
          else
            # Only use 1.0.0 if no releases exist at all
            VERSION="1.0.0"
            echo "No releases found, using default version: $VERSION"
          fi
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "deb_filename=ndp-responder-${VERSION}_amd64.deb" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libnl-3-dev libnl-route-3-dev libnl-genl-3-dev libpcap-dev libnet1-dev

    - name: Build project
      run: |
        chmod +x build.sh
        ./build.sh
        strip ndpresponder || echo "Unable to strip binary"
        
    - name: Install packaging tools
      run: |
        sudo apt-get install -y dpkg-dev fakeroot

    - name: Create Debian package structure
      run: |
        mkdir -p debian-package/DEBIAN
        mkdir -p debian-package/usr/local/bin
        mkdir -p debian-package/etc/systemd/system
        mkdir -p debian-package/etc/ndpresponder
        mkdir -p debian-package/usr/share/doc/ndpresponder
        mkdir -p debian-package/usr/lib/ndp-responder
        
        # Copy binary
        cp ndpresponder debian-package/usr/local/bin/
        chmod +x debian-package/usr/local/bin/ndpresponder
        
        # Copy systemd service template file
        cp package/deb/ndpresponder@.service debian-package/etc/systemd/system/
        
        # Copy configuration file as example
        cp sample-config.conf debian-package/etc/ndpresponder/nd0.example
        
        # Copy documentation
        cp README.md debian-package/usr/share/doc/ndpresponder/
        
        # Copy control file and update version
        cp package/deb/control debian-package/DEBIAN/control
        sed -i "s/^Version:.*/Version: ${{ steps.version.outputs.version }}/" debian-package/DEBIAN/control
        
        # Copy conffiles
        cp package/deb/conffiles debian-package/DEBIAN/conffiles
        
        # Copy package scripts from separate files
        cp package/deb/postinst debian-package/DEBIAN/postinst
        cp package/deb/prerm debian-package/DEBIAN/prerm
        cp package/deb/postrm debian-package/DEBIAN/postrm
        
        # Make scripts executable
        chmod +x debian-package/DEBIAN/postinst
        chmod +x debian-package/DEBIAN/prerm
        chmod +x debian-package/DEBIAN/postrm

    - name: Build Debian package
      run: |
        fakeroot dpkg-deb --build debian-package ${{ steps.version.outputs.deb_filename }}
        
        # Verify package
        dpkg-deb --info ${{ steps.version.outputs.deb_filename }}
        dpkg-deb --contents ${{ steps.version.outputs.deb_filename }}

    - name: Run package tests
      run: |
        # Test that the binary works
        ./ndpresponder -h || true
        
        # Test package integrity
        dpkg-deb --show ${{ steps.version.outputs.deb_filename }}
        
        # Test installation simulation
        echo "Testing package installation simulation..."
        dpkg-deb --extract ${{ steps.version.outputs.deb_filename }} test-install/
        ls -la test-install/usr/local/bin/
        ls -la test-install/etc/systemd/system/
        ls -la test-install/etc/ndp-responder/

    - name: Generate checksums
      run: |
        sha256sum ndpresponder > ndpresponder.sha256
        sha256sum ${{ steps.version.outputs.deb_filename }} > ${{ steps.version.outputs.deb_filename }}.sha256
        md5sum ndpresponder > ndpresponder.md5
        md5sum ${{ steps.version.outputs.deb_filename }} > ${{ steps.version.outputs.deb_filename }}.md5

    - name: Get latest release
      id: latest_release
      uses: actions/github-script@v6
      continue-on-error: true
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { data: releases } = await github.rest.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          
          if (releases.length === 0) {
            core.setOutput('has_release', 'false');
            console.log('No releases found - skipping release upload');
            return;
          }
          
          const latestRelease = releases[0];
          core.setOutput('has_release', 'true');
          core.setOutput('release_id', latestRelease.id);
          core.setOutput('release_tag', latestRelease.tag_name);

    - name: Check if assets exist
      id: check_assets
      if: steps.latest_release.outputs.has_release == 'true'
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const releaseId = ${{ steps.latest_release.outputs.release_id }};
          
          const { data: assets } = await github.rest.repos.listReleaseAssets({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: releaseId
          });
          
          const assetNames = [
            'ndpresponder',
            '${{ steps.version.outputs.deb_filename }}',
            'ndpresponder.sha256',
            '${{ steps.version.outputs.deb_filename }}.sha256',
            'ndpresponder.md5',
            '${{ steps.version.outputs.deb_filename }}.md5'
          ];
          
          const existingAssets = {};
          for (const asset of assets) {
            if (assetNames.includes(asset.name)) {
              existingAssets[asset.name] = asset.id;
            }
          }
          
          core.setOutput('existing_assets', JSON.stringify(existingAssets));

    - name: Delete existing assets if they exist
      if: steps.latest_release.outputs.has_release == 'true'
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const existingAssets = JSON.parse('${{ steps.check_assets.outputs.existing_assets }}');
          
          for (const [assetName, assetId] of Object.entries(existingAssets)) {
            console.log(`Deleting existing asset: ${assetName}`);
            await github.rest.repos.deleteReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              asset_id: parseInt(assetId)
            });
          }

    - name: Upload assets to release
      if: steps.latest_release.outputs.has_release == 'true'
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const releaseId = '${{ steps.latest_release.outputs.release_id }}';
          
          const assets = [
            { path: './ndpresponder', name: 'ndpresponder', contentType: 'application/octet-stream' },
            { path: './${{ steps.version.outputs.deb_filename }}', name: '${{ steps.version.outputs.deb_filename }}', contentType: 'application/vnd.debian.binary-package' },
            { path: './ndpresponder.sha256', name: 'ndpresponder.sha256', contentType: 'text/plain' },
            { path: './${{ steps.version.outputs.deb_filename }}.sha256', name: '${{ steps.version.outputs.deb_filename }}.sha256', contentType: 'text/plain' },
            { path: './ndpresponder.md5', name: 'ndpresponder.md5', contentType: 'text/plain' },
            { path: './${{ steps.version.outputs.deb_filename }}.md5', name: '${{ steps.version.outputs.deb_filename }}.md5', contentType: 'text/plain' }
          ];
          
          for (const asset of assets) {
            console.log(`Uploading ${asset.name}...`);
            const data = fs.readFileSync(asset.path);
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: parseInt(releaseId),
              name: asset.name,
              data: data
            });
          }

    - name: Upload artifacts (no release)
      if: steps.latest_release.outputs.has_release == 'false'
      uses: actions/upload-artifact@v4
      with:
        name: ndp-responder-build-${{ steps.version.outputs.version }}
        path: |
          ndpresponder
          ${{ steps.version.outputs.deb_filename }}
          *.sha256
          *.md5
        retention-days: 30

    - name: Create release summary
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Binary**: ndpresponder" >> $GITHUB_STEP_SUMMARY
        echo "- **Debian Package**: ${{ steps.version.outputs.deb_filename }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Architecture**: amd64" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Package Contents" >> $GITHUB_STEP_SUMMARY
        echo "- Binary: /usr/local/bin/ndpresponder" >> $GITHUB_STEP_SUMMARY
        echo "- Service: /etc/systemd/system/ndpresponder@.service" >> $GITHUB_STEP_SUMMARY
        echo "- Config: /etc/ndpresponder/nd0.example" >> $GITHUB_STEP_SUMMARY
        echo "- Documentation: /usr/share/doc/ndpresponder/" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Installation" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "# Download and install the .deb package" >> $GITHUB_STEP_SUMMARY
        echo "wget https://github.com/${{ github.repository }}/releases/download/\$TAG/${{ steps.version.outputs.deb_filename }}" >> $GITHUB_STEP_SUMMARY
        echo "sudo dpkg -i ${{ steps.version.outputs.deb_filename }}" >> $GITHUB_STEP_SUMMARY
        echo "sudo apt-get install -f  # Fix any dependency issues" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Configure and start default instance" >> $GITHUB_STEP_SUMMARY
        echo "sudo nano /etc/ndpresponder/nd0" >> $GITHUB_STEP_SUMMARY
        echo "sudo systemctl start ndpresponder@nd0" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Create additional instances" >> $GITHUB_STEP_SUMMARY
        echo "sudo cp /etc/ndpresponder/nd0 /etc/ndpresponder/myinstance" >> $GITHUB_STEP_SUMMARY
        echo "sudo systemctl enable --now ndpresponder@myinstance" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
